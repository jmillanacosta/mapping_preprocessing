name: Check and test HMDB updates

on:
  workflow_dispatch:
  pull_request: # tests whether it is working on PR
     paths:
     - '.github/workflows/hmdb.yml'
  schedule:
    - cron: "0 0 1,15 * *"  # Run the workflow on the 1st and 15th day of each month
permissions:
  contents: write
  pages: write
  id-token: write
  issues: write


jobs:
  check_new_data:
    runs-on: ubuntu-latest
    name: Check the date of the latest data
    outputs:
      DATE_NEW: ${{ steps.check_download.outputs.DATE_NEW }}
      DATE_OLD: ${{ steps.check_download.outputs.DATE_OLD }}
    steps:
      # step 1: check the release date for the latest hmdb files
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check for new hmdb files
        id: check_download
        run: |
          ##Setup
          sudo apt-get install xml-twig-tools

          ##Extract the date from the hmdb config file 
          date_old=$(grep -E '^date=' datasources/hmdb/config | cut -d'=' -f2)
          echo 'Accessing the hmdb data'
          wget http://www.hmdb.ca/system/downloads/current/hmdb_metabolites.zip
          unzip hmdb_metabolites.zip
          date_new=$(head hmdb_metabolites.xml | grep 'update_date' | sed 's/.*>\([0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}\).*/\1/')
          ##Extract the date from the latest changes (up to the day)
          date_new=$(echo $last_modified | cut -d':' -f2- | xargs -I {} date -d "{}" +%Y-%m-%d)
          #Store dates to output
          echo "DATE_OLD=$date_old" >> $GITHUB_OUTPUT
          echo "DATE_NEW=$date_new" >> $GITHUB_OUTPUT
          echo "Date of latest release: $date_new", "Date of release of the current version: $date_old"

  
  test_new_data_processing:
    name: Processing new data and check updates
    needs: check_new_data
    env:
      DATE_OLD: ${{ needs.check_new_data.outputs.DATE_OLD }}
      DATE_NEW: ${{ needs.check_new_data.outputs.DATE_NEW }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # step 2: download the recent data 
      - name: Download the recent data
        run: |
          ##Store outputs from previous job in environment variables
          echo "$DATE_NEW=$DATE_NEW" >> $GITHUB_ENV
          ##Create temp. folder to store the data in
          mkdir -p datasources/hmdb/data
          ##Download hmdb file
          wget http://www.hmdb.ca/system/downloads/current/hmdb_metabolites.zip
          unzip hmdb_metabolites.zip
          cd hmdb
          cp ../hmdb_metabolites.xml .
          xml_split -v -l 1 hmdb_metabolites.xml
          rm hmdb_metabolites.xml
          cd ../

          
      # step 3: run the jar for hmdb preprocessing 
      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      # Download current version from Zenodo
      #- name: Download current mapping file from Zenodo
      #  id: download_current_zenodo
      #  env:
      #    zenodo_token: ${{ secrets.ZENODO }}
      #  run: |
      #    # Set up vars from config file
      #    chmod +x datasources/chebi/config
      #    . datasources/chebi/config .
      #    echo "file name: $to_check_from_zenodo"
      #    # Request Zenodo API to download the file
      #    curl -H "Authorization: Bearer $zenodo_token" -LJO https://zenodo.org/api/record/$zenodo_file_id/$to_check_from_zenodo
      - name: Test SDF processing
        id: sdf_process
        run: |
          # Set up vars from config file
          to_check_from_zenodo=$(grep -E '^to_check_from_zenodo=' datasources/hmdb/config | cut -d'=' -f2)
          inputFile=$to_check_from_zenodo
          mkdir datasources/hmdb/recentData/
          outputDir="datasources/hmdb/recentData/"
          # Run Java program and capture its exit code
          java -cp java/target/mapping_prerocessing-0.0.1-jar-with-dependencies.jar org.sec2pri.hmdb_xml "$inputFile" "$outputDir"          
          # Check the exit status of the Java program
          if [ $? -eq 0 ]; then
              # Java program succeeded
              echo "Successful preprocessing of ChEBI data."
              echo "FAILED=false" >> $GITHUB_ENV
          else
              # Java program failed
              echo "Failed preprocessing of ChEBI data."
              echo "FAILED=true" >> $GITHUB_ENV
          fi
      # step 4: compare the new and old data 
      - name: Diff versions
        if:
          ${{ env.FAILED == 'false' }}
        run: |
          # Set up vars from config file
          to_check_from_zenodo=$(grep -E '^to_check_from_zenodo=' datasources/hmdb/config | cut -d'=' -f2)
          old="datasources/hmdb/data/$to_check_from_zenodo"
          new="datasources/hmdb/recentData/$to_check_from_zenodo"
          
          less $old | head
          less $new | head
          
          # Extract the primarySymbol and secondarySymbol column from both files and sort them
          cat "$old" | sort | tr -d "\r" > ids_old.txt
          cat "$new" | sort | tr -d "\r" > ids_new.txt

          echo "Performing diff between the sorted lists of Symbols"

          # Perform a diff between the sorted lists of Symbols
          output_file=diff.txt

          diff -u ids_old.txt ids_new.txt > $output_file || true
          less $output_file | head
          # retrieve new lines
          echo Counting added lines...
          added=$(grep '^+' "$output_file" | sed 's/+//g') || true
          # retrieve removed lines
          echo Counting removed lines...
          removed=$(grep '^-' "$output_file" | sed 's/-//g') || true
          added_filtered=$(comm -23 <(sort <<< "$added") <(sort <<< "$removed"))
          removed_filtered=$(comm -23 <(sort <<< "$removed") <(sort <<< "$added"))
          added=$added_filtered
          removed=$removed_filtered
          # count them
          echo Counting differences:
          count_removed=$(printf "$removed" | wc -l) || true
          count_added=$(printf "$added" | wc -l) || true

          # make sure we are not counting empty lines
          if [ -z "$removed" ]; then
           count_removed=0
          fi
          if [ -z "$added" ]; then
           count_added=0
          fi
          echo removed:
          echo "$removed"
          echo added:
          echo "$added"
          echo Added id pairs: $count_added
          echo Removed id pairs: $count_removed
          # Store to env to use in issue
          echo "ADDED=$count_added" >> $GITHUB_ENV
          echo "REMOVED=$count_removed" >> $GITHUB_ENV
          echo "URL_RELEASE=https://ftp.hmdb.nih.gov/gene/DATA/gene_history.gz" >> $GITHUB_ENV
      # step 5: post issues    
      - uses: JasonEtco/create-an-issue@v2
        name: Post issue about update availability
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SOURCE: "HMDB"
        with:
          filename: .github/ISSUE_TEMPLATE/ISSUE_UPDATE.md    
       
      - uses: JasonEtco/create-an-issue@v2
        name: Post issue about failing test
        if: ${{ env.FAILED == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SOURCE: hmdb
        with:
          filename: .github/ISSUE_TEMPLATE/ISSUE_FAIL.md
